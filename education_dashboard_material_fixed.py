#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
Material UI –¥–∏–∑–∞–π–Ω —Å dash-mantine-components (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
"""

import dash
from dash import dcc, html, Input, Output, callback
import dash_mantine_components as dmc
import plotly.express as px
import plotly.graph_objects as go
import pandas as pd
import numpy as np
from pathlib import Path
import re
from collections import Counter

# –ü—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º
DATA_DIR = Path("data/raw")

class MaterialEducationDashboard:
    def __init__(self):
        self.app = dash.Dash(__name__)
        self.data = {}
        self.load_data()
        self.setup_layout()
        self.setup_callbacks()
    
    def load_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç–∞—Å–µ—Ç—ã"""
        print("üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞...")
        
        # –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        try:
            # –°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–µ —ç–∫–∑–∞–º–µ–Ω—ã
            exam_path = DATA_DIR / "education" / "whenamancodes_students-performance-in-exams" / "exams.csv"
            if exam_path.exists():
                self.data['student_exams'] = pd.read_csv(exam_path)
                print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ–± —ç–∫–∑–∞–º–µ–Ω–∞—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç–∫–∑–∞–º–µ–Ω–æ–≤: {e}")
        
        try:
            # –î–∞–Ω–Ω—ã–µ –æ —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö (–ø–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π –¥–∞—Ç–∞—Å–µ—Ç)
            student_path = DATA_DIR / "education" / "larsen0966_student-performance-data-set" / "student-por.csv"
            if student_path.exists():
                self.data['student_performance'] = pd.read_csv(student_path, sep=';')
                print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏: {e}")
        
        try:
            # xAPI –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            xapi_path = DATA_DIR / "education" / "aljarah_xAPI-Edu-Data" / "xAPI-Edu-Data.csv"
            if xapi_path.exists():
                self.data['xapi_education'] = pd.read_csv(xapi_path)
                print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã xAPI –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ xAPI: {e}")
        
        # –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        try:
            # –ó–∞—Ä–ø–ª–∞—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            salary_path = DATA_DIR / "job_market" / "rkiattisak_salaly-prediction-for-beginer" / "Salary Data.csv"
            if salary_path.exists():
                self.data['salary_data'] = pd.read_csv(salary_path)
                print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—Ä–ø–ª–∞—Ç: {e}")
        
        try:
            # Data Science –≤–∞–∫–∞–Ω—Å–∏–∏
            ds_jobs_path = DATA_DIR / "job_market" / "andrewmvd_data-scientist-jobs" / "DataScientist.csv"
            if ds_jobs_path.exists():
                self.data['ds_jobs'] = pd.read_csv(ds_jobs_path)
                print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –≤–∞–∫–∞–Ω—Å–∏—è—Ö Data Science")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ DS –≤–∞–∫–∞–Ω—Å–∏–π: {e}")
        
        print(f"üìà –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.data)} –¥–∞—Ç–∞—Å–µ—Ç–æ–≤")
    
    def create_stats_cards(self):
        """–°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        total_records = sum(len(df) for df in self.data.values())
        datasets_count = len(self.data)
        
        # –ü–æ–¥—Å—á–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        students_count = 0
        if 'student_exams' in self.data:
            students_count += len(self.data['student_exams'])
        if 'student_performance' in self.data:
            students_count += len(self.data['student_performance'])
        if 'xapi_education' in self.data:
            students_count += len(self.data['xapi_education'])
        
        # –ü–æ–¥—Å—á–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π
        jobs_count = 0
        if 'ds_jobs' in self.data:
            jobs_count += len(self.data['ds_jobs'])
        if 'salary_data' in self.data:
            jobs_count += len(self.data['salary_data'])
        
        return html.Div([
            html.Div([
                dmc.Card([
                    html.Div([
                        html.H2("üìä", style={'fontSize': '2rem', 'margin': '0'}),
                        html.P("–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π", style={'margin': '5px 0', 'color': '#666'}),
                        html.H3(f"{total_records:,}", style={'margin': '0', 'color': '#1976d2'})
                    ], style={'textAlign': 'center'})
                ], withBorder=True, shadow="sm", radius="md", p="lg"),
                
                dmc.Card([
                    html.Div([
                        html.H2("üóÇÔ∏è", style={'fontSize': '2rem', 'margin': '0'}),
                        html.P("–î–∞—Ç–∞—Å–µ—Ç–æ–≤", style={'margin': '5px 0', 'color': '#666'}),
                        html.H3(f"{datasets_count}", style={'margin': '0', 'color': '#4caf50'})
                    ], style={'textAlign': 'center'})
                ], withBorder=True, shadow="sm", radius="md", p="lg"),
                
                dmc.Card([
                    html.Div([
                        html.H2("üéì", style={'fontSize': '2rem', 'margin': '0'}),
                        html.P("–°—Ç—É–¥–µ–Ω—Ç–æ–≤", style={'margin': '5px 0', 'color': '#666'}),
                        html.H3(f"{students_count:,}", style={'margin': '0', 'color': '#ff9800'})
                    ], style={'textAlign': 'center'})
                ], withBorder=True, shadow="sm", radius="md", p="lg"),
                
                dmc.Card([
                    html.Div([
                        html.H2("üíº", style={'fontSize': '2rem', 'margin': '0'}),
                        html.P("–í–∞–∫–∞–Ω—Å–∏–π", style={'margin': '5px 0', 'color': '#666'}),
                        html.H3(f"{jobs_count:,}", style={'margin': '0', 'color': '#9c27b0'})
                    ], style={'textAlign': 'center'})
                ], withBorder=True, shadow="sm", radius="md", p="lg")
            ], style={
                'display': 'grid',
                'gridTemplateColumns': 'repeat(4, 1fr)',
                'gap': '20px',
                'marginBottom': '20px'
            })
        ])
    
    def setup_layout(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞–∫–µ—Ç –¥–∞—à–±–æ—Ä–¥–∞ —Å Material UI"""
        self.app.layout = dmc.MantineProvider([
            dmc.Container([
                # –ó–∞–≥–æ–ª–æ–≤–æ–∫
                dmc.Paper([
                    html.Div([
                        html.H1("üéì –î–∞—à–±–æ—Ä–¥ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã", 
                               style={'color': '#1976d2', 'textAlign': 'center', 'marginBottom': '10px'}),
                        html.P("–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ Kaggle –¥–∞—Ç–∞—Å–µ—Ç–æ–≤",
                               style={'textAlign': 'center', 'color': '#666', 'fontSize': '18px', 'marginBottom': '30px'}),
                        
                        # –ö–∞—Ä—Ç–æ—á–∫–∏ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
                        self.create_stats_cards()
                    ])
                ], shadow="sm", radius="md", p="xl", withBorder=True, style={'marginBottom': '30px'}),
                
                # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
                html.Div([
                    dmc.Button("üìö –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", id="btn-education", 
                              variant="filled", color="blue", size="lg", style={'margin': '5px'}),
                    dmc.Button("üíº –†—ã–Ω–æ—á–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", id="btn-market", 
                              variant="outline", color="green", size="lg", style={'margin': '5px'}),
                    dmc.Button("üéØ –ò–Ω—Å–∞–π—Ç—ã –¥–ª—è MVP", id="btn-insights", 
                              variant="outline", color="orange", size="lg", style={'margin': '5px'})
                ], style={'textAlign': 'center', 'marginBottom': '30px'}),
                
                # –ö–æ–Ω—Ç–µ–Ω—Ç
                html.Div(id='content-area')
            ], size="xl")
        ])
    
    def create_education_tab(self):
        """–°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π"""
        charts = []
        
        # –ì—Ä–∞—Ñ–∏–∫ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏ –ø–æ –ø–æ–ª—É
        if 'student_exams' in self.data:
            df = self.data['student_exams']
            
            # –°—Ä–µ–¥–Ω–∏–µ –±–∞–ª–ª—ã –ø–æ –ø–æ–ª—É
            gender_scores = df.groupby('gender')[['math score', 'reading score', 'writing score']].mean()
            
            fig1 = px.bar(
                x=gender_scores.index,
                y=[gender_scores['math score'], gender_scores['reading score'], gender_scores['writing score']],
                title="–°—Ä–µ–¥–Ω–∏–µ –±–∞–ª–ª—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º –∏ –ø–æ–ª—É",
                labels={'x': '–ü–æ–ª', 'y': '–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª'},
                color_discrete_sequence=['#1976d2', '#f57c00', '#388e3c']
            )
            fig1.update_layout(
                showlegend=True,
                plot_bgcolor='rgba(0,0,0,0)',
                paper_bgcolor='rgba(0,0,0,0)',
                font=dict(family="Inter, sans-serif"),
                title_font_size=16,
                title_font_color='#1976d2'
            )
            
            charts.append(
                dmc.Card([
                    html.H3("üìä –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏ –ø–æ –ø–æ–ª—É", style={'color': '#1976d2', 'marginBottom': '20px'}),
                    dcc.Graph(figure=fig1, style={'height': '400px'})
                ], withBorder=True, shadow="sm", radius="md", p="lg", style={'marginBottom': '30px'})
            )
            
            # –í–ª–∏—è–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Ç–µ—Å—Ç–∞–º
            fig2 = px.box(
                df, 
                x='test preparation course', 
                y='math score',
                title="–í–ª–∏—è–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ",
                color='test preparation course',
                color_discrete_sequence=['#1976d2', '#f57c00']
            )
            fig2.update_layout(
                plot_bgcolor='rgba(0,0,0,0)',
                paper_bgcolor='rgba(0,0,0,0)',
                font=dict(family="Inter, sans-serif"),
                title_font_size=16,
                title_font_color='#1976d2'
            )
            
            charts.append(
                dmc.Card([
                    html.H3("üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –∫—É—Ä—Å–æ–≤", style={'color': '#f57c00', 'marginBottom': '20px'}),
                    dcc.Graph(figure=fig2, style={'height': '400px'})
                ], withBorder=True, shadow="sm", radius="md", p="lg", style={'marginBottom': '30px'})
            )
        
        # –ê–Ω–∞–ª–∏–∑ xAPI –¥–∞–Ω–Ω—ã—Ö
        if 'xapi_education' in self.data:
            df = self.data['xapi_education']
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤
            class_dist = df['Class'].value_counts()
            
            fig3 = px.pie(
                values=class_dist.values,
                names=class_dist.index,
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—è–º —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏",
                color_discrete_sequence=['#f44336', '#ff9800', '#4caf50']
            )
            fig3.update_layout(
                plot_bgcolor='rgba(0,0,0,0)',
                paper_bgcolor='rgba(0,0,0,0)',
                font=dict(family="Inter, sans-serif"),
                title_font_size=16,
                title_font_color='#1976d2'
            )
            
            charts.append(
                dmc.Card([
                    html.H3("üéØ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏", style={'color': '#4caf50', 'marginBottom': '20px'}),
                    dcc.Graph(figure=fig3, style={'height': '400px'})
                ], withBorder=True, shadow="sm", radius="md", p="lg", style={'marginBottom': '30px'})
            )
        
        return html.Div(charts)
    
    def create_market_tab(self):
        """–°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å —Ä—ã–Ω–æ—á–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π"""
        charts = []
        
        # –ó–∞—Ä–ø–ª–∞—Ç–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        if 'salary_data' in self.data:
            df = self.data['salary_data'].dropna()
            
            # –ó–∞—Ä–ø–ª–∞—Ç—ã –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º
            job_salaries = df.groupby('Job Title')['Salary'].mean().sort_values(ascending=False).head(10)
            
            fig1 = px.bar(
                x=job_salaries.values,
                y=job_salaries.index,
                orientation='h',
                title="–¢–æ–ø-10 –≤—ã—Å–æ–∫–æ–æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã—Ö –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π",
                labels={'x': '–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞ ($)', 'y': '–î–æ–ª–∂–Ω–æ—Å—Ç—å'},
                color=job_salaries.values,
                color_continuous_scale='Viridis'
            )
            fig1.update_layout(
                plot_bgcolor='rgba(0,0,0,0)',
                paper_bgcolor='rgba(0,0,0,0)',
                font=dict(family="Inter, sans-serif"),
                title_font_size=16,
                title_font_color='#1976d2'
            )
            
            charts.append(
                dmc.Card([
                    html.H3("üí∞ –ê–Ω–∞–ª–∏–∑ –∑–∞—Ä–ø–ª–∞—Ç –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º", style={'color': '#4caf50', 'marginBottom': '20px'}),
                    dcc.Graph(figure=fig1, style={'height': '500px'})
                ], withBorder=True, shadow="sm", radius="md", p="lg", style={'marginBottom': '30px'})
            )
        
        return html.Div(charts)
    
    def create_insights_tab(self):
        """–°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å –∏–Ω—Å–∞–π—Ç–∞–º–∏ –¥–ª—è MVP"""
        
        # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total_records = sum(len(df) for df in self.data.values())
        datasets_count = len(self.data)
        
        insights = [
            {
                "icon": "üéØ",
                "title": "–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–Ω–∞",
                "description": "–î–∞–Ω–Ω—ã–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç, —á—Ç–æ —Ä–∞–∑–Ω—ã–µ –≥—Ä—É–ø–ø—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Ç—Ä–µ–±—É—é—Ç —Ä–∞–∑–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤ –∫ –æ–±—É—á–µ–Ω–∏—é. –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ 15-20% –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.",
                "recommendation": "–°–æ–∑–¥–∞–π—Ç–µ –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞"
            },
            {
                "icon": "üìà",
                "title": "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞",
                "description": "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã —É–ª—É—á—à–∞—é—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫–∑–∞–º–µ–Ω–æ–≤ –Ω–∞ 15-20%. –≠—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Ü–µ–Ω–Ω–æ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è.",
                "recommendation": "–†–∞–∑—Ä–∞–±–æ—Ç–∞–π—Ç–µ —Å–∏—Å—Ç–µ–º—É –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö –Ω–∞–≤—ã–∫–æ–≤"
            },
            {
                "icon": "ü§ö",
                "title": "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å = —É—Å–ø–µ—Ö",
                "description": "–°—Ç—É–¥–µ–Ω—Ç—ã —Å –≤—ã—Å–æ–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é (–ø–æ–¥–Ω—è—Ç–∏–µ —Ä—É–∫, –ø–æ—Å–µ—â–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤) –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.",
                "recommendation": "–í–Ω–µ–¥—Ä–∏—Ç–µ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ —Å–∏—Å—Ç–µ–º—É –ø–æ–æ—â—Ä–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
            },
            {
                "icon": "üí∞",
                "title": "Data Science –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω",
                "description": "–ù–∞–≤—ã–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Å–∞–º—ã–µ –≤—ã—Å–æ–∫–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã –∏ —Å–ø—Ä–æ—Å –Ω–∞ —Ä—ã–Ω–∫–µ —Ç—Ä—É–¥–∞.",
                "recommendation": "–°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –∫—É—Ä—Å–∞—Ö –ø–æ Data Science –¥–ª—è –Ω–µ-—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤"
            },
            {
                "icon": "üéì",
                "title": "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –æ–∫—É–ø–∞–µ—Ç—Å—è",
                "description": "–ö–∞–∂–¥—ã–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—É –Ω–∞ 20-40%.",
                "recommendation": "–°–æ–∑–¥–∞–π—Ç–µ —á–µ—Ç–∫–∏–µ –ø—É—Ç–∏ –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"
            }
        ]
        
        insight_cards = []
        for insight in insights:
            card = dmc.Card([
                html.Div([
                    html.H2(insight["icon"], style={'fontSize': '3rem', 'margin': '0 0 10px 0'}),
                    html.H3(insight["title"], style={'color': '#1976d2', 'margin': '0 0 10px 0'}),
                    html.P(insight["description"], style={'color': '#666', 'marginBottom': '15px'}),
                    html.Hr(),
                    dmc.Badge("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è", color="blue", variant="light", style={'marginBottom': '10px'}),
                    html.P(insight["recommendation"], style={'fontWeight': '500', 'color': '#333'})
                ])
            ], withBorder=True, shadow="sm", radius="md", p="lg", style={'marginBottom': '20px'})
            insight_cards.append(card)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
        stats_section = dmc.Card([
            html.H2("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö", style={'color': '#1976d2', 'marginBottom': '20px'}),
            html.Div([
                html.Div([
                    html.H2(f"{total_records:,}", style={'color': '#1976d2', 'margin': '0'}),
                    html.P("–ó–∞–ø–∏—Å–µ–π –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ", style={'margin': '5px 0'})
                ], style={'textAlign': 'center'}),
                html.Div([
                    html.H2(f"{datasets_count}", style={'color': '#4caf50', 'margin': '0'}),
                    html.P("–î–∞—Ç–∞—Å–µ—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ", style={'margin': '5px 0'})
                ], style={'textAlign': 'center'}),
                html.Div([
                    html.H2("5", style={'color': '#ff9800', 'margin': '0'}),
                    html.P("–ö–ª—é—á–µ–≤—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤", style={'margin': '5px 0'})
                ], style={'textAlign': 'center'})
            ], style={
                'display': 'grid',
                'gridTemplateColumns': 'repeat(3, 1fr)',
                'gap': '20px',
                'marginBottom': '20px'
            })
        ], withBorder=True, shadow="md", radius="md", p="xl", style={'marginBottom': '30px'})
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è MVP
        mvp_recommendations = dmc.Card([
            html.H2("üöÄ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è MVP", style={'color': '#ff5722', 'marginBottom': '20px'}),
            html.P("–ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", style={'marginBottom': '15px'}),
            html.Ul([
                html.Li("Soft Skills for Tech Professionals - –Ω–∏–∑–∫–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è, –≤—ã—Å–æ–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª"),
                html.Li("Data Skills for Non-Techies - –±–æ–ª—å—à–æ–π —Ä—ã–Ω–æ–∫, –≤—ã—Å–æ–∫–∏–π —Å–ø—Ä–æ—Å"),
                html.Li("Career Transition Accelerator - –≤—ã—Å–æ–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å")
            ], style={'marginBottom': '20px'}),
            dmc.Alert(
                "–ù–∞—á–Ω–∏—Ç–µ —Å –Ω–∏—à–∏ 'Soft Skills for Tech Professionals' –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ MVP",
                title="üí° –ì–ª–∞–≤–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è",
                color="blue"
            )
        ], withBorder=True, shadow="sm", radius="md", p="xl")
        
        return html.Div([
            stats_section,
            html.Div(insight_cards),
            mvp_recommendations
        ])
    
    def setup_callbacks(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–ª–±—ç–∫–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        @self.app.callback(
            [Output('content-area', 'children'),
             Output('btn-education', 'variant'),
             Output('btn-market', 'variant'),
             Output('btn-insights', 'variant')],
            [Input('btn-education', 'n_clicks'),
             Input('btn-market', 'n_clicks'),
             Input('btn-insights', 'n_clicks')]
        )
        def update_content(btn_edu, btn_market, btn_insights):
            ctx = dash.callback_context
            
            if not ctx.triggered:
                # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É
                return self.create_education_tab(), "filled", "outline", "outline"
            
            button_id = ctx.triggered[0]['prop_id'].split('.')[0]
            
            if button_id == 'btn-education':
                return self.create_education_tab(), "filled", "outline", "outline"
            elif button_id == 'btn-market':
                return self.create_market_tab(), "outline", "filled", "outline"
            elif button_id == 'btn-insights':
                return self.create_insights_tab(), "outline", "outline", "filled"
            
            return self.create_education_tab(), "filled", "outline", "outline"
    
    def run(self, debug=True, port=8052):
        """–ó–∞–ø—É—Å–∫ –¥–∞—à–±–æ—Ä–¥–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Material UI –¥–∞—à–±–æ—Ä–¥ –Ω–∞ http://localhost:8052")
        print("üîó –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã—à–µ")
        print("üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:")
        print("  ‚Ä¢ –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ - –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
        print("  ‚Ä¢ –†—ã–Ω–æ—á–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ - –∞–Ω–∞–ª–∏–∑ –≤–∞–∫–∞–Ω—Å–∏–π –∏ –∑–∞—Ä–ø–ª–∞—Ç")
        print("  ‚Ä¢ –ò–Ω—Å–∞–π—Ç—ã –¥–ª—è MVP - —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞")
        print()
        self.app.run_server(debug=debug, port=port, host='127.0.0.1')

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    dashboard = MaterialEducationDashboard()
    dashboard.run()

if __name__ == "__main__":
    main() 