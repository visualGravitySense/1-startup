#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
"""

import dash
from dash import dcc, html, Input, Output, callback
import plotly.express as px
import plotly.graph_objects as go
import pandas as pd
import numpy as np
from pathlib import Path
import re
from collections import Counter

# –ü—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º
DATA_DIR = Path("data/raw")

class EducationDashboard:
    def __init__(self):
        self.app = dash.Dash(__name__)
        self.data = {}
        self.load_data()
        self.setup_layout()
        self.setup_callbacks()
    
    def load_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç–∞—Å–µ—Ç—ã"""
        print("üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞...")
        
        # –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        try:
            # –°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–µ —ç–∫–∑–∞–º–µ–Ω—ã
            exam_path = DATA_DIR / "education" / "whenamancodes_students-performance-in-exams" / "exams.csv"
            if exam_path.exists():
                self.data['student_exams'] = pd.read_csv(exam_path)
                print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ–± —ç–∫–∑–∞–º–µ–Ω–∞—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç–∫–∑–∞–º–µ–Ω–æ–≤: {e}")
        
        try:
            # –î–∞–Ω–Ω—ã–µ –æ —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö (–ø–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π –¥–∞—Ç–∞—Å–µ—Ç)
            student_path = DATA_DIR / "education" / "larsen0966_student-performance-data-set" / "student-por.csv"
            if student_path.exists():
                self.data['student_performance'] = pd.read_csv(student_path, sep=';')
                print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏: {e}")
        
        try:
            # xAPI –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            xapi_path = DATA_DIR / "education" / "aljarah_xAPI-Edu-Data" / "xAPI-Edu-Data.csv"
            if xapi_path.exists():
                self.data['xapi_education'] = pd.read_csv(xapi_path)
                print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã xAPI –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ xAPI: {e}")
        
        # –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        try:
            # –ó–∞—Ä–ø–ª–∞—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            salary_path = DATA_DIR / "job_market" / "rkiattisak_salaly-prediction-for-beginer" / "Salary Data.csv"
            if salary_path.exists():
                self.data['salary_data'] = pd.read_csv(salary_path)
                print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—Ä–ø–ª–∞—Ç: {e}")
        
        try:
            # Data Science –≤–∞–∫–∞–Ω—Å–∏–∏
            ds_jobs_path = DATA_DIR / "job_market" / "andrewmvd_data-scientist-jobs" / "DataScientist.csv"
            if ds_jobs_path.exists():
                self.data['ds_jobs'] = pd.read_csv(ds_jobs_path)
                print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –≤–∞–∫–∞–Ω—Å–∏—è—Ö Data Science")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ DS –≤–∞–∫–∞–Ω—Å–∏–π: {e}")
        
        print(f"üìà –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.data)} –¥–∞—Ç–∞—Å–µ—Ç–æ–≤")
    
    def setup_layout(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞–∫–µ—Ç –¥–∞—à–±–æ—Ä–¥–∞"""
        self.app.layout = html.Div([
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            html.Div([
                html.H1("üéì –î–∞—à–±–æ—Ä–¥ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã", 
                       style={'textAlign': 'center', 'color': '#2c3e50', 'marginBottom': 30}),
                html.P("–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ Kaggle –¥–∞—Ç–∞—Å–µ—Ç–æ–≤",
                       style={'textAlign': 'center', 'color': '#7f8c8d', 'fontSize': 18})
            ], style={'backgroundColor': '#ecf0f1', 'padding': '20px', 'marginBottom': '20px'}),
            
            # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–∞–±—ã
            dcc.Tabs(id="main-tabs", value='education-tab', children=[
                dcc.Tab(label='üìö –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞', value='education-tab'),
                dcc.Tab(label='üíº –†—ã–Ω–æ—á–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞', value='market-tab'),
                dcc.Tab(label='üéØ –ò–Ω—Å–∞–π—Ç—ã –¥–ª—è MVP', value='insights-tab'),
            ], style={'marginBottom': '20px'}),
            
            # –ö–æ–Ω—Ç–µ–Ω—Ç —Ç–∞–±–æ–≤
            html.Div(id='tab-content')
        ])
    
    def create_education_tab(self):
        """–°–æ–∑–¥–∞–µ–º —Ç–∞–± —Å –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π"""
        charts = []
        
        # –ì—Ä–∞—Ñ–∏–∫ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏ –ø–æ –ø–æ–ª—É
        if 'student_exams' in self.data:
            df = self.data['student_exams']
            
            # –°—Ä–µ–¥–Ω–∏–µ –±–∞–ª–ª—ã –ø–æ –ø–æ–ª—É
            gender_scores = df.groupby('gender')[['math score', 'reading score', 'writing score']].mean()
            
            fig1 = px.bar(
                x=gender_scores.index,
                y=[gender_scores['math score'], gender_scores['reading score'], gender_scores['writing score']],
                title="üìä –°—Ä–µ–¥–Ω–∏–µ –±–∞–ª–ª—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º –∏ –ø–æ–ª—É",
                labels={'x': '–ü–æ–ª', 'y': '–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª'},
                color_discrete_sequence=['#3498db', '#e74c3c', '#2ecc71']
            )
            fig1.update_layout(showlegend=True)
            
            charts.append(dcc.Graph(figure=fig1))
            
            # –í–ª–∏—è–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Ç–µ—Å—Ç–∞–º
            prep_scores = df.groupby('test preparation course')[['math score', 'reading score', 'writing score']].mean()
            
            fig2 = px.box(
                df, 
                x='test preparation course', 
                y='math score',
                title="üìà –í–ª–∏—è–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ",
                color='test preparation course'
            )
            
            charts.append(dcc.Graph(figure=fig2))
        
        # –ê–Ω–∞–ª–∏–∑ xAPI –¥–∞–Ω–Ω—ã—Ö
        if 'xapi_education' in self.data:
            df = self.data['xapi_education']
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤
            class_dist = df['Class'].value_counts()
            
            fig3 = px.pie(
                values=class_dist.values,
                names=class_dist.index,
                title="üéØ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—è–º —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏",
                color_discrete_sequence=['#e74c3c', '#f39c12', '#2ecc71']
            )
            
            charts.append(dcc.Graph(figure=fig3))
            
            # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
            fig4 = px.scatter(
                df,
                x='raisedhands',
                y='VisITedResources',
                color='Class',
                title="ü§ö –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: –ø–æ–¥–Ω—è—Ç–∏–µ —Ä—É–∫ vs –ø–æ—Å–µ—â–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤",
                labels={'raisedhands': '–ü–æ–¥–Ω—è—Ç–∏–µ —Ä—É–∫', 'VisITedResources': '–ü–æ—Å–µ—â–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤'}
            )
            
            charts.append(dcc.Graph(figure=fig4))
        
        return html.Div(charts)
    
    def create_market_tab(self):
        """–°–æ–∑–¥–∞–µ–º —Ç–∞–± —Å —Ä—ã–Ω–æ—á–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π"""
        charts = []
        
        # –ó–∞—Ä–ø–ª–∞—Ç–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        if 'salary_data' in self.data:
            df = self.data['salary_data'].dropna()
            
            # –ó–∞—Ä–ø–ª–∞—Ç—ã –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º
            job_salaries = df.groupby('Job Title')['Salary'].mean().sort_values(ascending=False).head(10)
            
            fig1 = px.bar(
                x=job_salaries.values,
                y=job_salaries.index,
                orientation='h',
                title="üí∞ –¢–æ–ø-10 –≤—ã—Å–æ–∫–æ–æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã—Ö –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π",
                labels={'x': '–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞ ($)', 'y': '–î–æ–ª–∂–Ω–æ—Å—Ç—å'},
                color=job_salaries.values,
                color_continuous_scale='Viridis'
            )
            
            charts.append(dcc.Graph(figure=fig1))
            
            # –ó–∞—Ä–ø–ª–∞—Ç—ã –ø–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—é
            edu_salaries = df.groupby('Education Level')['Salary'].mean()
            
            fig2 = px.bar(
                x=edu_salaries.index,
                y=edu_salaries.values,
                title="üéì –í–ª–∏—è–Ω–∏–µ —É—Ä–æ–≤–Ω—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç—É",
                labels={'x': '–£—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è', 'y': '–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞ ($)'},
                color=edu_salaries.values,
                color_continuous_scale='Blues'
            )
            
            charts.append(dcc.Graph(figure=fig2))
            
            # –û–ø—ã—Ç vs –ó–∞—Ä–ø–ª–∞—Ç–∞
            fig3 = px.scatter(
                df,
                x='Years of Experience',
                y='Salary',
                color='Education Level',
                title="üìà –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—ã –æ—Ç –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã",
                labels={'Years of Experience': '–ì–æ–¥—ã –æ–ø—ã—Ç–∞', 'Salary': '–ó–∞—Ä–ø–ª–∞—Ç–∞ ($)'}
            )
            
            charts.append(dcc.Graph(figure=fig3))
        
        # –ê–Ω–∞–ª–∏–∑ –≤–∞–∫–∞–Ω—Å–∏–π Data Science
        if 'ds_jobs' in self.data:
            df = self.data['ds_jobs']
            
            # –¢–æ–ø –∫–æ–º–ø–∞–Ω–∏–π
            top_companies = df['Company Name'].value_counts().head(10)
            
            fig4 = px.bar(
                x=top_companies.values,
                y=top_companies.index,
                orientation='h',
                title="üè¢ –¢–æ–ø-10 –∫–æ–º–ø–∞–Ω–∏–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤–∞–∫–∞–Ω—Å–∏–π Data Science",
                labels={'x': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π', 'y': '–ö–æ–º–ø–∞–Ω–∏—è'}
            )
            
            charts.append(dcc.Graph(figure=fig4))
            
            # –†–µ–π—Ç–∏–Ω–≥–∏ –∫–æ–º–ø–∞–Ω–∏–π
            if 'Rating' in df.columns:
                rating_dist = df['Rating'].dropna()
                
                fig5 = px.histogram(
                    x=rating_dist,
                    title="‚≠ê –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –∫–æ–º–ø–∞–Ω–∏–π",
                    labels={'x': '–†–µ–π—Ç–∏–Ω–≥ –∫–æ–º–ø–∞–Ω–∏–∏', 'y': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'},
                    nbins=20
                )
                
                charts.append(dcc.Graph(figure=fig5))
        
        return html.Div(charts)
    
    def create_insights_tab(self):
        """–°–æ–∑–¥–∞–µ–º —Ç–∞–± —Å –∏–Ω—Å–∞–π—Ç–∞–º–∏ –¥–ª—è MVP"""
        insights = []
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∞–Ω–Ω—ã–º
        stats = []
        for name, df in self.data.items():
            stats.append({
                '–î–∞—Ç–∞—Å–µ—Ç': name.replace('_', ' ').title(),
                '–ó–∞–ø–∏—Å–µ–π': f"{len(df):,}",
                '–°—Ç–æ–ª–±—Ü–æ–≤': len(df.columns),
                '–†–∞–∑–º–µ—Ä': f"{df.memory_usage(deep=True).sum() / 1024:.1f} KB"
            })
        
        if stats:
            stats_df = pd.DataFrame(stats)
            
            fig_stats = go.Figure(data=[go.Table(
                header=dict(values=list(stats_df.columns),
                           fill_color='paleturquoise',
                           align='left'),
                cells=dict(values=[stats_df[col] for col in stats_df.columns],
                          fill_color='lavender',
                          align='left'))
            ])
            fig_stats.update_layout(title="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            
            insights.append(dcc.Graph(figure=fig_stats))
        
        # –ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã
        insights_text = html.Div([
            html.H3("üéØ –ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã", 
                   style={'color': '#2c3e50', 'marginTop': '30px'}),
            
            html.Div([
                html.H4("üìö –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:", style={'color': '#3498db'}),
                html.Ul([
                    html.Li("–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª–∞ –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏"),
                    html.Li("–í–∞–∂–Ω–æ—Å—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"),
                    html.Li("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å—é"),
                    html.Li("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Ä–∞–∑–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
                ])
            ], style={'backgroundColor': '#ecf0f1', 'padding': '15px', 'margin': '10px', 'borderRadius': '5px'}),
            
            html.Div([
                html.H4("üíº –†—ã–Ω–æ—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:", style={'color': '#e74c3c'}),
                html.Ul([
                    html.Li("–í—ã—Å–æ–∫–∏–π —Å–ø—Ä–æ—Å –Ω–∞ Data Science —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤"),
                    html.Li("–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ —É—Ä–æ–≤–Ω—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç—É"),
                    html.Li("–í–∞–∂–Ω–æ—Å—Ç—å –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã –¥–ª—è –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞"),
                    html.Li("–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –∫–æ–º–ø–∞–Ω–∏–π, –Ω–∞–Ω–∏–º–∞—é—â–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤")
                ])
            ], style={'backgroundColor': '#fdf2e9', 'padding': '15px', 'margin': '10px', 'borderRadius': '5px'}),
            
            html.Div([
                html.H4("üöÄ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è MVP:", style={'color': '#27ae60'}),
                html.Ol([
                    html.Li("–°–∏—Å—Ç–µ–º–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞"),
                    html.Li("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ä—ã–Ω–∫–µ —Ç—Ä—É–¥–∞ –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∫—É—Ä—Å–æ–≤"),
                    html.Li("–ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"),
                    html.Li("–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫—É—Ä—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö —Ü–µ–ª–µ–π"),
                    html.Li("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏")
                ])
            ], style={'backgroundColor': '#eafaf1', 'padding': '15px', 'margin': '10px', 'borderRadius': '5px'})
        ])
        
        insights.append(insights_text)
        
        return html.Div(insights)
    
    def setup_callbacks(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"""
        @self.app.callback(
            Output('tab-content', 'children'),
            Input('main-tabs', 'value')
        )
        def render_content(active_tab):
            if active_tab == 'education-tab':
                return self.create_education_tab()
            elif active_tab == 'market-tab':
                return self.create_market_tab()
            elif active_tab == 'insights-tab':
                return self.create_insights_tab()
            return html.Div("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–± –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö")
    
    def run(self, debug=True, port=8050):
        """–ó–∞–ø—É—Å–∫–∞–µ–º –¥–∞—à–±–æ—Ä–¥"""
        print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∞—à–±–æ—Ä–¥ –Ω–∞ http://localhost:{port}")
        print("üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:")
        print("  ‚Ä¢ –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ - –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
        print("  ‚Ä¢ –†—ã–Ω–æ—á–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ - –∞–Ω–∞–ª–∏–∑ –≤–∞–∫–∞–Ω—Å–∏–π –∏ –∑–∞—Ä–ø–ª–∞—Ç")
        print("  ‚Ä¢ –ò–Ω—Å–∞–π—Ç—ã –¥–ª—è MVP - —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞")
        print("\nüîó –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã—à–µ")
        
        self.app.run(debug=debug, port=port, host='127.0.0.1')

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    dashboard = EducationDashboard()
    dashboard.run()

if __name__ == "__main__":
    main() 