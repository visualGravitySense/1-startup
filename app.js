import InterviewTracker from './interview-tracker.js';

// üöÄ –ì–õ–ê–í–ù–û–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–ï
class App {
  constructor() {
    this.tracker = new InterviewTracker();
    this.currentTab = 'dashboard';
    this.init();
  }

  async init() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const today = new Date().toISOString().split('T')[0];
    document.getElementById('interviewDate').value = today;
    document.getElementById('metricsDate').value = today;

    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    this.bindEvents();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    await this.loadDashboard();
    await this.loadContacts();
    await this.loadContactsForInterview();
  }

  bindEvents() {
    // –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
    document.getElementById('contactForm').addEventListener('submit', (e) => {
      e.preventDefault();
      this.addContact();
    });

    // –§–æ—Ä–º–∞ –∑–∞–ø–∏—Å–∏ –∏–Ω—Ç–µ—Ä–≤—å—é
    document.getElementById('interviewForm').addEventListener('submit', (e) => {
      e.preventDefault();
      this.recordInterview();
    });

    // –§–æ—Ä–º–∞ –º–µ—Ç—Ä–∏–∫
    document.getElementById('metricsForm').addEventListener('submit', (e) => {
      e.preventDefault();
      this.recordMetrics();
    });
  }

  // üìä –ó–ê–ì–†–£–ó–ö–ê –î–ê–®–ë–û–†–î–ê
  async loadDashboard() {
    try {
      const stats = await this.tracker.getStats();
      
      document.getElementById('totalContacts').textContent = stats.contacts.total;
      document.getElementById('totalInterviews').textContent = stats.interviews.total;
      document.getElementById('responseRate').textContent = stats.messages.responseRate;
      document.getElementById('conversionRate').textContent = stats.conversion.contactToInterview;

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
      this.showRecentActivity(stats);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞:', error);
      this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞');
    }
  }

  showRecentActivity(stats) {
    const container = document.getElementById('recentActivity');
    
    if (stats.contacts.total === 0) {
      container.innerHTML = '<p style="text-align: center; color: #6c757d;">–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç!</p>';
      return;
    }

    let html = '<h4>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:</h4>';
    
    Object.entries(stats.contacts.byStatus).forEach(([status, count]) => {
      const statusText = {
        'found': '–ù–∞–π–¥–µ–Ω–æ',
        'contacted': '–°–≤—è–∑–∞–ª–∏—Å—å',
        'responded': '–û—Ç–≤–µ—Ç–∏–ª–∏',
        'interviewed': '–ò–Ω—Ç–µ—Ä–≤—å—é –ø—Ä–æ–≤–µ–¥–µ–Ω–æ'
      };
      
      html += `
        <div class="contact-item">
          <div class="contact-info">
            <h4>${statusText[status] || status}</h4>
            <p>${count} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤</p>
          </div>
          <span class="status-badge status-${status}">${count}</span>
        </div>
      `;
    });

    container.innerHTML = html;
  }

  // üë• –î–û–ë–ê–í–õ–ï–ù–ò–ï –ö–û–ù–¢–ê–ö–¢–ê
  async addContact() {
    try {
      const contactData = {
        name: document.getElementById('contactName').value,
        platform: document.getElementById('contactPlatform').value,
        username: document.getElementById('contactUsername').value,
        role: document.getElementById('contactRole').value,
        experience: parseInt(document.getElementById('contactExperience').value) || 0,
        company: document.getElementById('contactCompany').value,
        source: document.getElementById('contactSource').value,
        notes: document.getElementById('contactNotes').value,
        technologies: [] // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ –¥–ª—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π
      };

      const contactId = await this.tracker.addContact(contactData);
      
      this.showSuccess('‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!');
      document.getElementById('contactForm').reset();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏
      await this.loadContacts();
      await this.loadContactsForInterview();
      await this.loadDashboard();
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞:', error);
      this.showError('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞');
    }
  }

  // üìã –ó–ê–ì–†–£–ó–ö–ê –°–ü–ò–°–ö–ê –ö–û–ù–¢–ê–ö–¢–û–í
  async loadContacts() {
    try {
      const stats = await this.tracker.getStats();
      const container = document.getElementById('contactsList');
      
      if (stats.contacts.total === 0) {
        container.innerHTML = '<p style="text-align: center; color: #6c757d;">–ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>';
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ getContacts() –≤ tracker
      container.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤...</div>';
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º
      let html = '';
      Object.entries(stats.contacts.byStatus).forEach(([status, count]) => {
        const statusText = {
          'found': '–ù–∞–π–¥–µ–Ω–æ',
          'contacted': '–°–≤—è–∑–∞–ª–∏—Å—å', 
          'responded': '–û—Ç–≤–µ—Ç–∏–ª–∏',
          'interviewed': '–ò–Ω—Ç–µ—Ä–≤—å—é –ø—Ä–æ–≤–µ–¥–µ–Ω–æ'
        };
        
        html += `
          <div class="contact-item">
            <div class="contact-info">
              <h4>${statusText[status] || status}</h4>
              <p>${count} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ —ç—Ç–æ–º —Å—Ç–∞—Ç—É—Å–µ</p>
            </div>
            <span class="status-badge status-${status}">${status}</span>
          </div>
        `;
      });
      
      container.innerHTML = html;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', error);
      document.getElementById('contactsList').innerHTML = '<p style="color: red;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤</p>';
    }
  }

  // üé§ –ó–ê–ì–†–£–ó–ö–ê –ö–û–ù–¢–ê–ö–¢–û–í –î–õ–Ø –ò–ù–¢–ï–†–í–¨–Æ
  async loadContactsForInterview() {
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å –∫ Firebase
      // –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É
      const select = document.getElementById('interviewContact');
      select.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç</option>';
      
      // –î–æ–±–∞–≤–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      const exampleContacts = [
        { id: 'example1', name: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤ (@ivan_dev)' },
        { id: 'example2', name: '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞ (LinkedIn)' },
        { id: 'example3', name: '–ê–ª–µ–∫—Å–µ–π –ö–æ–∑–ª–æ–≤ (Discord)' }
      ];
      
      exampleContacts.forEach(contact => {
        const option = document.createElement('option');
        option.value = contact.id;
        option.textContent = contact.name;
        select.appendChild(option);
      });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é:', error);
    }
  }

  // üé§ –ó–ê–ü–ò–°–¨ –ò–ù–¢–ï–†–í–¨–Æ
  async recordInterview() {
    try {
      const contactId = document.getElementById('interviewContact').value;
      
      if (!contactId) {
        this.showError('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é');
        return;
      }

      const interviewData = {
        date: document.getElementById('interviewDate').value,
        duration: parseInt(document.getElementById('interviewDuration').value) || 15,
        format: document.getElementById('interviewFormat').value,
        answers: {
          presentationFrequency: document.getElementById('presentationFreq').value,
          willingToPay: document.getElementById('willingToPay').value === 'true',
          priceRange: document.getElementById('priceRange').value,
          preferredFormat: 'online' // –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ
        },
        keyInsights: document.getElementById('keyInsights').value.split(',').map(s => s.trim()).filter(s => s),
        painPoints: document.getElementById('painPoints').value.split(',').map(s => s.trim()).filter(s => s),
        quotes: document.getElementById('quotes').value.split('\n').filter(s => s.trim()),
        quality: document.getElementById('interviewQuality').value
      };

      const interviewId = await this.tracker.recordInterview(contactId, interviewData);
      
      this.showSuccess('‚úÖ –ò–Ω—Ç–µ—Ä–≤—å—é —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ!');
      document.getElementById('interviewForm').reset();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—à–±–æ—Ä–¥
      await this.loadDashboard();
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∏–Ω—Ç–µ—Ä–≤—å—é:', error);
      this.showError('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∏–Ω—Ç–µ—Ä–≤—å—é');
    }
  }

  // üìä –ó–ê–ü–ò–°–¨ –ú–ï–¢–†–ò–ö
  async recordMetrics() {
    try {
      const date = document.getElementById('metricsDate').value;
      
      const metrics = {
        groupsFound: parseInt(document.getElementById('groupsFound').value) || 0,
        contactsFound: parseInt(document.getElementById('contactsFound').value) || 0,
        messagesSent: parseInt(document.getElementById('messagesSent').value) || 0,
        responsesReceived: parseInt(document.getElementById('responsesReceived').value) || 0,
        interviewsScheduled: parseInt(document.getElementById('interviewsScheduled').value) || 0,
        interviewsCompleted: parseInt(document.getElementById('interviewsCompleted').value) || 0,
        timeSpent: parseInt(document.getElementById('timeSpent').value) || 0,
        notes: document.getElementById('metricsNotes').value
      };

      const metricsId = await this.tracker.recordDailyMetrics(date, metrics);
      
      this.showSuccess('‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
      document.getElementById('metricsForm').reset();
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤—Ç—Ä–∞—à–Ω—é—é –¥–∞—Ç—É
      const tomorrow = new Date();
      tomorrow.setDate(tomorrow.getDate() + 1);
      document.getElementById('metricsDate').value = tomorrow.toISOString().split('T')[0];
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –º–µ—Ç—Ä–∏–∫:', error);
      this.showError('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –º–µ—Ç—Ä–∏–∫');
    }
  }

  // üé® –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
  showSuccess(message) {
    this.showMessage(message, 'success');
  }

  showError(message) {
    this.showMessage(message, 'error');
  }

  showMessage(message, type) {
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    const existingMessages = document.querySelectorAll('.success-message, .error-message');
    existingMessages.forEach(msg => msg.remove());

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const messageDiv = document.createElement('div');
    messageDiv.className = type === 'success' ? 'success-message' : 'error-message';
    messageDiv.textContent = message;

    // –í—Å—Ç–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
    const activeTab = document.querySelector('.tab-content.active');
    activeTab.insertBefore(messageDiv, activeTab.firstChild);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      messageDiv.remove();
    }, 5000);
  }
}

// üîÑ –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –í–ö–õ–ê–î–û–ö
window.showTab = function(tabName) {
  // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
  document.querySelectorAll('.tab-content').forEach(tab => {
    tab.classList.remove('active');
  });
  
  // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å –∫–Ω–æ–ø–æ–∫
  document.querySelectorAll('.tab').forEach(tab => {
    tab.classList.remove('active');
  });
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É
  document.getElementById(tabName).classList.add('active');
  
  // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É
  event.target.classList.add('active');
};

// üöÄ –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
document.addEventListener('DOMContentLoaded', () => {
  window.app = new App();
});

// üì± –≠–ö–°–ü–û–†–¢ –î–õ–Ø –û–¢–õ–ê–î–ö–ò
export default App;

// –ü—Ä–æ—Å—Ç–æ–π Express —Å–µ—Ä–≤–µ—Ä –¥–ª—è Firebase Dashboard
const express = require('express');
const path = require('path');
const cors = require('cors');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static('.'));

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - Firebase Dashboard
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'firebase-dashboard.html'));
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ
app.get('/api/project-info', (req, res) => {
    res.json({
        name: 'Startup Firebase Manager',
        description: '–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ —Å—Ç–∞—Ä—Ç–∞–ø–∞ "Soft Skills for Tech Professionals"',
        version: '1.0.0',
        collections: [
            'interviews',
            'product_concepts', 
            'mvp_modules',
            'blog_posts',
            'daily_metrics'
        ],
        status: 'ready'
    });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`üöÄ Firebase Dashboard –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
    console.log(`üìä –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã—à–µ`);
    console.log(`üî• –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Firebase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ`);
});

module.exports = app; 