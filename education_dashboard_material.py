#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π Material UI –¥–∏–∑–∞–π–Ω —Å dash-mantine-components
"""

import dash
from dash import dcc, html, Input, Output, callback
import dash_mantine_components as dmc
import plotly.express as px
import plotly.graph_objects as go
import pandas as pd
import numpy as np
from pathlib import Path
import re
from collections import Counter

# –ü—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º
DATA_DIR = Path("data/raw")

class MaterialEducationDashboard:
    def __init__(self):
        self.app = dash.Dash(__name__)
        self.data = {}
        self.load_data()
        self.setup_layout()
        self.setup_callbacks()
    
    def load_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç–∞—Å–µ—Ç—ã"""
        print("üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞...")
        
        # –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        try:
            # –°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–µ —ç–∫–∑–∞–º–µ–Ω—ã
            exam_path = DATA_DIR / "education" / "whenamancodes_students-performance-in-exams" / "exams.csv"
            if exam_path.exists():
                self.data['student_exams'] = pd.read_csv(exam_path)
                print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ–± —ç–∫–∑–∞–º–µ–Ω–∞—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç–∫–∑–∞–º–µ–Ω–æ–≤: {e}")
        
        try:
            # –î–∞–Ω–Ω—ã–µ –æ —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö (–ø–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π –¥–∞—Ç–∞—Å–µ—Ç)
            student_path = DATA_DIR / "education" / "larsen0966_student-performance-data-set" / "student-por.csv"
            if student_path.exists():
                self.data['student_performance'] = pd.read_csv(student_path, sep=';')
                print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏: {e}")
        
        try:
            # xAPI –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            xapi_path = DATA_DIR / "education" / "aljarah_xAPI-Edu-Data" / "xAPI-Edu-Data.csv"
            if xapi_path.exists():
                self.data['xapi_education'] = pd.read_csv(xapi_path)
                print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã xAPI –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ xAPI: {e}")
        
        # –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        try:
            # –ó–∞—Ä–ø–ª–∞—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            salary_path = DATA_DIR / "job_market" / "rkiattisak_salaly-prediction-for-beginer" / "Salary Data.csv"
            if salary_path.exists():
                self.data['salary_data'] = pd.read_csv(salary_path)
                print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—Ä–ø–ª–∞—Ç: {e}")
        
        try:
            # Data Science –≤–∞–∫–∞–Ω—Å–∏–∏
            ds_jobs_path = DATA_DIR / "job_market" / "andrewmvd_data-scientist-jobs" / "DataScientist.csv"
            if ds_jobs_path.exists():
                self.data['ds_jobs'] = pd.read_csv(ds_jobs_path)
                print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –≤–∞–∫–∞–Ω—Å–∏—è—Ö Data Science")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ DS –≤–∞–∫–∞–Ω—Å–∏–π: {e}")
        
        print(f"üìà –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.data)} –¥–∞—Ç–∞—Å–µ—Ç–æ–≤")
    
    def create_stats_cards(self):
        """–°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        total_records = sum(len(df) for df in self.data.values())
        datasets_count = len(self.data)
        
        # –ü–æ–¥—Å—á–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        students_count = 0
        if 'student_exams' in self.data:
            students_count += len(self.data['student_exams'])
        if 'student_performance' in self.data:
            students_count += len(self.data['student_performance'])
        if 'xapi_education' in self.data:
            students_count += len(self.data['xapi_education'])
        
        # –ü–æ–¥—Å—á–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π
        jobs_count = 0
        if 'ds_jobs' in self.data:
            jobs_count += len(self.data['ds_jobs'])
        if 'salary_data' in self.data:
            jobs_count += len(self.data['salary_data'])
        
        return dmc.SimpleGrid(
            cols=4,
            children=[
                dmc.Card(
                    children=[
                        dmc.Group([
                            dmc.ThemeIcon(
                                children="üìä",
                                size="xl",
                                radius="md",
                                variant="light",
                                color="blue"
                            ),
                            dmc.Stack([
                                dmc.Text("–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π", size="sm", c="dimmed"),
                                dmc.Text(f"{total_records:,}", size="xl", fw=700)
                            ], gap=0)
                        ], justify="space-between")
                    ],
                    withBorder=True,
                    shadow="sm",
                    radius="md",
                    p="lg"
                ),
                dmc.Card(
                    children=[
                        dmc.Group([
                            dmc.ThemeIcon(
                                children="üóÇÔ∏è",
                                size="xl",
                                radius="md",
                                variant="light",
                                color="green"
                            ),
                            dmc.Stack([
                                dmc.Text("–î–∞—Ç–∞—Å–µ—Ç–æ–≤", size="sm", c="dimmed"),
                                dmc.Text(f"{datasets_count}", size="xl", fw=700)
                            ], gap=0)
                        ], justify="space-between")
                    ],
                    withBorder=True,
                    shadow="sm",
                    radius="md",
                    p="lg"
                ),
                dmc.Card(
                    children=[
                        dmc.Group([
                            dmc.ThemeIcon(
                                children="üéì",
                                size="xl",
                                radius="md",
                                variant="light",
                                color="orange"
                            ),
                            dmc.Stack([
                                dmc.Text("–°—Ç—É–¥–µ–Ω—Ç–æ–≤", size="sm", c="dimmed"),
                                dmc.Text(f"{students_count:,}", size="xl", fw=700)
                            ], gap=0)
                        ], justify="space-between")
                    ],
                    withBorder=True,
                    shadow="sm",
                    radius="md",
                    p="lg"
                ),
                dmc.Card(
                    children=[
                        dmc.Group([
                            dmc.ThemeIcon(
                                children="üíº",
                                size="xl",
                                radius="md",
                                variant="light",
                                color="violet"
                            ),
                            dmc.Stack([
                                dmc.Text("–í–∞–∫–∞–Ω—Å–∏–π", size="sm", c="dimmed"),
                                dmc.Text(f"{jobs_count:,}", size="xl", fw=700)
                            ], gap=0)
                        ], justify="space-between")
                    ],
                    withBorder=True,
                    shadow="sm",
                    radius="md",
                    p="lg"
                )
            ]
        )
    
    def setup_layout(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞–∫–µ—Ç –¥–∞—à–±–æ—Ä–¥–∞ —Å Material UI"""
        self.app.layout = dmc.MantineProvider(
            theme={
                "colorScheme": "light",
                "primaryColor": "blue",
                "fontFamily": "'Inter', sans-serif"
            },
            children=[
                dmc.Container(
                    size="xl",
                    px="md",
                    children=[
                        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
                        dmc.Paper(
                            children=[
                                dmc.Stack([
                                    dmc.Group([
                                        dmc.ThemeIcon(
                                            children="üéì",
                                            size="xl",
                                            radius="md",
                                            variant="gradient",
                                            gradient={"from": "blue", "to": "cyan"}
                                        ),
                                        dmc.Stack([
                                            dmc.Title(
                                                "–î–∞—à–±–æ—Ä–¥ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã",
                                                order=1,
                                                c="blue"
                                            ),
                                            dmc.Text(
                                                "–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ Kaggle –¥–∞—Ç–∞—Å–µ—Ç–æ–≤",
                                                size="lg",
                                                c="dimmed"
                                            )
                                        ], gap=0)
                                    ]),
                                    
                                    # –ö–∞—Ä—Ç–æ—á–∫–∏ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
                                    self.create_stats_cards()
                                ])
                            ],
                            shadow="sm",
                            radius="md",
                            p="xl",
                            mb="xl",
                            withBorder=True
                        ),
                        
                        # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–∞–±—ã
                        dmc.Tabs(
                            id="main-tabs",
                            value="education-tab",
                            children=[
                                dmc.TabsList([
                                    dmc.Tab("üìö –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", value="education-tab"),
                                    dmc.Tab("üíº –†—ã–Ω–æ—á–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", value="market-tab"),
                                    dmc.Tab("üéØ –ò–Ω—Å–∞–π—Ç—ã –¥–ª—è MVP", value="insights-tab"),
                                ]),
                                
                                # –ö–æ–Ω—Ç–µ–Ω—Ç —Ç–∞–±–æ–≤
                                html.Div(id='tab-content', style={'marginTop': '20px'})
                            ]
                        )
                    ]
                )
            ]
        )
    
    def create_education_tab(self):
        """–°–æ–∑–¥–∞–µ–º —Ç–∞–± —Å –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –≤ Material UI —Å—Ç–∏–ª–µ"""
        charts = []
        
        # –ì—Ä–∞—Ñ–∏–∫ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏ –ø–æ –ø–æ–ª—É
        if 'student_exams' in self.data:
            df = self.data['student_exams']
            
            # –°—Ä–µ–¥–Ω–∏–µ –±–∞–ª–ª—ã –ø–æ –ø–æ–ª—É
            gender_scores = df.groupby('gender')[['math score', 'reading score', 'writing score']].mean()
            
            fig1 = px.bar(
                x=gender_scores.index,
                y=[gender_scores['math score'], gender_scores['reading score'], gender_scores['writing score']],
                title="–°—Ä–µ–¥–Ω–∏–µ –±–∞–ª–ª—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º –∏ –ø–æ–ª—É",
                labels={'x': '–ü–æ–ª', 'y': '–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª'},
                color_discrete_sequence=['#1976d2', '#f57c00', '#388e3c']
            )
            fig1.update_layout(
                showlegend=True,
                plot_bgcolor='rgba(0,0,0,0)',
                paper_bgcolor='rgba(0,0,0,0)',
                font=dict(family="Inter, sans-serif"),
                title_font_size=16,
                title_font_color='#1976d2'
            )
            
            charts.append(
                dmc.Card(
                    children=[
                        dmc.CardSection([
                            dmc.Group([
                                dmc.ThemeIcon(
                                    children="üìä",
                                    size="lg",
                                    radius="md",
                                    variant="light",
                                    color="blue"
                                ),
                                dmc.Text("–ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏ –ø–æ –ø–æ–ª—É", weight=500, size="lg")
                            ], spacing="sm")
                        ], inheritPadding=True, py="xs"),
                        dcc.Graph(figure=fig1, style={'height': '400px'})
                    ],
                    withBorder=True,
                    shadow="sm",
                    radius="md",
                    mb="lg"
                )
            )
            
            # –í–ª–∏—è–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Ç–µ—Å—Ç–∞–º
            fig2 = px.box(
                df, 
                x='test preparation course', 
                y='math score',
                title="–í–ª–∏—è–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ",
                color='test preparation course',
                color_discrete_sequence=['#1976d2', '#f57c00']
            )
            fig2.update_layout(
                plot_bgcolor='rgba(0,0,0,0)',
                paper_bgcolor='rgba(0,0,0,0)',
                font=dict(family="Inter, sans-serif"),
                title_font_size=16,
                title_font_color='#1976d2'
            )
            
            charts.append(
                dmc.Card(
                    children=[
                        dmc.CardSection([
                            dmc.Group([
                                dmc.ThemeIcon(
                                    children="üìà",
                                    size="lg",
                                    radius="md",
                                    variant="light",
                                    color="orange"
                                ),
                                dmc.Text("–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –∫—É—Ä—Å–æ–≤", weight=500, size="lg")
                            ], spacing="sm")
                        ], inheritPadding=True, py="xs"),
                        dcc.Graph(figure=fig2, style={'height': '400px'})
                    ],
                    withBorder=True,
                    shadow="sm",
                    radius="md",
                    mb="lg"
                )
            )
        
        # –ê–Ω–∞–ª–∏–∑ xAPI –¥–∞–Ω–Ω—ã—Ö
        if 'xapi_education' in self.data:
            df = self.data['xapi_education']
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤
            class_dist = df['Class'].value_counts()
            
            fig3 = px.pie(
                values=class_dist.values,
                names=class_dist.index,
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—è–º —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏",
                color_discrete_sequence=['#f44336', '#ff9800', '#4caf50']
            )
            fig3.update_layout(
                plot_bgcolor='rgba(0,0,0,0)',
                paper_bgcolor='rgba(0,0,0,0)',
                font=dict(family="Inter, sans-serif"),
                title_font_size=16,
                title_font_color='#1976d2'
            )
            
            charts.append(
                dmc.Card(
                    children=[
                        dmc.CardSection([
                            dmc.Group([
                                dmc.ThemeIcon(
                                    children="üéØ",
                                    size="lg",
                                    radius="md",
                                    variant="light",
                                    color="green"
                                ),
                                dmc.Text("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏", weight=500, size="lg")
                            ], spacing="sm")
                        ], inheritPadding=True, py="xs"),
                        dcc.Graph(figure=fig3, style={'height': '400px'})
                    ],
                    withBorder=True,
                    shadow="sm",
                    radius="md",
                    mb="lg"
                )
            )
            
            # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
            fig4 = px.scatter(
                df,
                x='raisedhands',
                y='VisITedResources',
                color='Class',
                title="–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: –ø–æ–¥–Ω—è—Ç–∏–µ —Ä—É–∫ vs –ø–æ—Å–µ—â–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤",
                labels={'raisedhands': '–ü–æ–¥–Ω—è—Ç–∏–µ —Ä—É–∫', 'VisITedResources': '–ü–æ—Å–µ—â–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤'},
                color_discrete_sequence=['#f44336', '#ff9800', '#4caf50']
            )
            fig4.update_layout(
                plot_bgcolor='rgba(0,0,0,0)',
                paper_bgcolor='rgba(0,0,0,0)',
                font=dict(family="Inter, sans-serif"),
                title_font_size=16,
                title_font_color='#1976d2'
            )
            
            charts.append(
                dmc.Card(
                    children=[
                        dmc.CardSection([
                            dmc.Group([
                                dmc.ThemeIcon(
                                    children="ü§ö",
                                    size="lg",
                                    radius="md",
                                    variant="light",
                                    color="violet"
                                ),
                                dmc.Text("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏", weight=500, size="lg")
                            ], spacing="sm")
                        ], inheritPadding=True, py="xs"),
                        dcc.Graph(figure=fig4, style={'height': '400px'})
                    ],
                    withBorder=True,
                    shadow="sm",
                    radius="md",
                    mb="lg"
                )
            )
        
        return dmc.Stack(charts, spacing="lg")
    
    def create_market_tab(self):
        """–°–æ–∑–¥–∞–µ–º —Ç–∞–± —Å —Ä—ã–Ω–æ—á–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –≤ Material UI —Å—Ç–∏–ª–µ"""
        charts = []
        
        # –ó–∞—Ä–ø–ª–∞—Ç–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        if 'salary_data' in self.data:
            df = self.data['salary_data'].dropna()
            
            # –ó–∞—Ä–ø–ª–∞—Ç—ã –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º
            job_salaries = df.groupby('Job Title')['Salary'].mean().sort_values(ascending=False).head(10)
            
            fig1 = px.bar(
                x=job_salaries.values,
                y=job_salaries.index,
                orientation='h',
                title="–¢–æ–ø-10 –≤—ã—Å–æ–∫–æ–æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã—Ö –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π",
                labels={'x': '–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞ ($)', 'y': '–î–æ–ª–∂–Ω–æ—Å—Ç—å'},
                color=job_salaries.values,
                color_continuous_scale='Viridis'
            )
            fig1.update_layout(
                plot_bgcolor='rgba(0,0,0,0)',
                paper_bgcolor='rgba(0,0,0,0)',
                font=dict(family="Inter, sans-serif"),
                title_font_size=16,
                title_font_color='#1976d2'
            )
            
            charts.append(
                dmc.Card(
                    children=[
                        dmc.CardSection([
                            dmc.Group([
                                dmc.ThemeIcon(
                                    children="üí∞",
                                    size="lg",
                                    radius="md",
                                    variant="light",
                                    color="green"
                                ),
                                dmc.Text("–ê–Ω–∞–ª–∏–∑ –∑–∞—Ä–ø–ª–∞—Ç –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º", weight=500, size="lg")
                            ], spacing="sm")
                        ], inheritPadding=True, py="xs"),
                        dcc.Graph(figure=fig1, style={'height': '500px'})
                    ],
                    withBorder=True,
                    shadow="sm",
                    radius="md",
                    mb="lg"
                )
            )
            
            # –ó–∞—Ä–ø–ª–∞—Ç—ã –ø–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—é
            edu_salaries = df.groupby('Education Level')['Salary'].mean()
            
            fig2 = px.bar(
                x=edu_salaries.index,
                y=edu_salaries.values,
                title="–í–ª–∏—è–Ω–∏–µ —É—Ä–æ–≤–Ω—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç—É",
                labels={'x': '–£—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è', 'y': '–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞ ($)'},
                color=edu_salaries.values,
                color_continuous_scale='Blues'
            )
            fig2.update_layout(
                plot_bgcolor='rgba(0,0,0,0)',
                paper_bgcolor='rgba(0,0,0,0)',
                font=dict(family="Inter, sans-serif"),
                title_font_size=16,
                title_font_color='#1976d2'
            )
            
            charts.append(
                dmc.Card(
                    children=[
                        dmc.CardSection([
                            dmc.Group([
                                dmc.ThemeIcon(
                                    children="üéì",
                                    size="lg",
                                    radius="md",
                                    variant="light",
                                    color="blue"
                                ),
                                dmc.Text("ROI –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è", weight=500, size="lg")
                            ], spacing="sm")
                        ], inheritPadding=True, py="xs"),
                        dcc.Graph(figure=fig2, style={'height': '400px'})
                    ],
                    withBorder=True,
                    shadow="sm",
                    radius="md",
                    mb="lg"
                )
            )
        
        # –ê–Ω–∞–ª–∏–∑ –≤–∞–∫–∞–Ω—Å–∏–π Data Science
        if 'ds_jobs' in self.data:
            df = self.data['ds_jobs']
            
            # –¢–æ–ø –∫–æ–º–ø–∞–Ω–∏–π
            if 'Company' in df.columns:
                top_companies = df['Company'].value_counts().head(10)
                
                fig3 = px.bar(
                    x=top_companies.values,
                    y=top_companies.index,
                    orientation='h',
                    title="–¢–æ–ø –∫–æ–º–ø–∞–Ω–∏–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤–∞–∫–∞–Ω—Å–∏–π Data Science",
                    labels={'x': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π', 'y': '–ö–æ–º–ø–∞–Ω–∏—è'},
                    color=top_companies.values,
                    color_continuous_scale='Oranges'
                )
                fig3.update_layout(
                    plot_bgcolor='rgba(0,0,0,0)',
                    paper_bgcolor='rgba(0,0,0,0)',
                    font=dict(family="Inter, sans-serif"),
                    title_font_size=16,
                    title_font_color='#1976d2'
                )
                
                charts.append(
                    dmc.Card(
                        children=[
                            dmc.CardSection([
                                dmc.Group([
                                    dmc.ThemeIcon(
                                        children="üè¢",
                                        size="lg",
                                        radius="md",
                                        variant="light",
                                        color="orange"
                                    ),
                                    dmc.Text("–¢–æ–ø —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π –≤ Data Science", weight=500, size="lg")
                                ], spacing="sm")
                            ], inheritPadding=True, py="xs"),
                            dcc.Graph(figure=fig3, style={'height': '500px'})
                        ],
                        withBorder=True,
                        shadow="sm",
                        radius="md",
                        mb="lg"
                    )
                )
        
        return dmc.Stack(charts, spacing="lg")
    
    def create_insights_tab(self):
        """–°–æ–∑–¥–∞–µ–º —Ç–∞–± —Å –∏–Ω—Å–∞–π—Ç–∞–º–∏ –¥–ª—è MVP –≤ Material UI —Å—Ç–∏–ª–µ"""
        
        # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total_records = sum(len(df) for df in self.data.values())
        datasets_count = len(self.data)
        
        insights = [
            {
                "icon": "üéØ",
                "title": "–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–Ω–∞",
                "description": "–î–∞–Ω–Ω—ã–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç, —á—Ç–æ —Ä–∞–∑–Ω—ã–µ –≥—Ä—É–ø–ø—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Ç—Ä–µ–±—É—é—Ç —Ä–∞–∑–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤ –∫ –æ–±—É—á–µ–Ω–∏—é. –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ 15-20% –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.",
                "color": "blue",
                "recommendation": "–°–æ–∑–¥–∞–π—Ç–µ –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞"
            },
            {
                "icon": "üìà",
                "title": "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞",
                "description": "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã —É–ª—É—á—à–∞—é—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫–∑–∞–º–µ–Ω–æ–≤ –Ω–∞ 15-20%. –≠—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Ü–µ–Ω–Ω–æ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è.",
                "color": "green",
                "recommendation": "–†–∞–∑—Ä–∞–±–æ—Ç–∞–π—Ç–µ —Å–∏—Å—Ç–µ–º—É –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö –Ω–∞–≤—ã–∫–æ–≤"
            },
            {
                "icon": "ü§ö",
                "title": "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å = —É—Å–ø–µ—Ö",
                "description": "–°—Ç—É–¥–µ–Ω—Ç—ã —Å –≤—ã—Å–æ–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é (–ø–æ–¥–Ω—è—Ç–∏–µ —Ä—É–∫, –ø–æ—Å–µ—â–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤) –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.",
                "color": "orange",
                "recommendation": "–í–Ω–µ–¥—Ä–∏—Ç–µ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ —Å–∏—Å—Ç–µ–º—É –ø–æ–æ—â—Ä–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
            },
            {
                "icon": "üí∞",
                "title": "Data Science –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω",
                "description": "–ù–∞–≤—ã–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Å–∞–º—ã–µ –≤—ã—Å–æ–∫–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã –∏ —Å–ø—Ä–æ—Å –Ω–∞ —Ä—ã–Ω–∫–µ —Ç—Ä—É–¥–∞.",
                "color": "violet",
                "recommendation": "–°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –∫—É—Ä—Å–∞—Ö –ø–æ Data Science –¥–ª—è –Ω–µ-—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤"
            },
            {
                "icon": "üéì",
                "title": "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –æ–∫—É–ø–∞–µ—Ç—Å—è",
                "description": "–ö–∞–∂–¥—ã–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—É –Ω–∞ 20-40%.",
                "color": "teal",
                "recommendation": "–°–æ–∑–¥–∞–π—Ç–µ —á–µ—Ç–∫–∏–µ –ø—É—Ç–∏ –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"
            }
        ]
        
        insight_cards = []
        for insight in insights:
            card = dmc.Card(
                children=[
                    dmc.Group([
                        dmc.ThemeIcon(
                            children=insight["icon"],
                            size="xl",
                            radius="md",
                            variant="light",
                            color=insight["color"]
                        ),
                        dmc.Stack([
                            dmc.Text(insight["title"], weight=700, size="lg"),
                            dmc.Text(insight["description"], size="sm", color="dimmed"),
                            dmc.Divider(),
                            dmc.Group([
                                dmc.Badge("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è", color=insight["color"], variant="light"),
                                dmc.Text(insight["recommendation"], size="sm", weight=500)
                            ], spacing="xs")
                        ], spacing="xs")
                    ], spacing="md", align="flex-start")
                ],
                withBorder=True,
                shadow="sm",
                radius="md",
                p="lg"
            )
            insight_cards.append(card)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
        stats_section = dmc.Card(
            children=[
                dmc.Stack([
                    dmc.Group([
                        dmc.ThemeIcon(
                            children="üìä",
                            size="xl",
                            radius="md",
                            variant="gradient",
                            gradient={"from": "blue", "to": "cyan"}
                        ),
                        dmc.Text("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö", weight=700, size="xl")
                    ], spacing="md"),
                    
                    dmc.SimpleGrid(
                        cols=3,
                        spacing="lg",
                        children=[
                            dmc.Stack([
                                dmc.Text(f"{total_records:,}", size="xl", weight=700, color="blue"),
                                dmc.Text("–ó–∞–ø–∏—Å–µ–π –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ", size="sm", color="dimmed")
                            ], spacing=0, align="center"),
                            dmc.Stack([
                                dmc.Text(f"{datasets_count}", size="xl", weight=700, color="green"),
                                dmc.Text("–î–∞—Ç–∞—Å–µ—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ", size="sm", color="dimmed")
                            ], spacing=0, align="center"),
                            dmc.Stack([
                                dmc.Text("5", size="xl", weight=700, color="orange"),
                                dmc.Text("–ö–ª—é—á–µ–≤—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤", size="sm", color="dimmed")
                            ], spacing=0, align="center")
                        ]
                    )
                ], spacing="lg")
            ],
            withBorder=True,
            shadow="md",
            radius="md",
            p="xl",
            mb="xl"
        )
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è MVP
        mvp_recommendations = dmc.Card(
            children=[
                dmc.Stack([
                    dmc.Group([
                        dmc.ThemeIcon(
                            children="üöÄ",
                            size="xl",
                            radius="md",
                            variant="gradient",
                            gradient={"from": "orange", "to": "red"}
                        ),
                        dmc.Text("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è MVP", weight=700, size="xl")
                    ], spacing="md"),
                    
                    dmc.Text("–ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", size="md", color="dimmed"),
                    
                    dmc.List([
                        dmc.ListItem("Soft Skills for Tech Professionals - –Ω–∏–∑–∫–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è, –≤—ã—Å–æ–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª"),
                        dmc.ListItem("Data Skills for Non-Techies - –±–æ–ª—å—à–æ–π —Ä—ã–Ω–æ–∫, –≤—ã—Å–æ–∫–∏–π —Å–ø—Ä–æ—Å"),
                        dmc.ListItem("Career Transition Accelerator - –≤—ã—Å–æ–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å")
                    ], spacing="sm"),
                    
                    dmc.Alert(
                        "–ù–∞—á–Ω–∏—Ç–µ —Å –Ω–∏—à–∏ 'Soft Skills for Tech Professionals' –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ MVP",
                        title="üí° –ì–ª–∞–≤–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è",
                        color="blue",
                        variant="light"
                    )
                ], spacing="lg")
            ],
            withBorder=True,
            shadow="sm",
            radius="md",
            p="xl"
        )
        
        return dmc.Stack([
            stats_section,
            dmc.SimpleGrid(cols=1, spacing="lg", children=insight_cards),
            mvp_recommendations
        ], spacing="xl")
    
    def setup_callbacks(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–ª–±—ç–∫–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        @self.app.callback(
            Output('tab-content', 'children'),
            Input('main-tabs', 'value')
        )
        def render_content(active_tab):
            if active_tab == 'education-tab':
                return self.create_education_tab()
            elif active_tab == 'market-tab':
                return self.create_market_tab()
            elif active_tab == 'insights-tab':
                return self.create_insights_tab()
            return html.Div("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    
    def run(self, debug=True, port=8051):
        """–ó–∞–ø—É—Å–∫ –¥–∞—à–±–æ—Ä–¥–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∞—à–±–æ—Ä–¥ –Ω–∞ http://localhost:8051")
        print("üîó –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã—à–µ")
        print("üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:")
        print("  ‚Ä¢ –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ - –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
        print("  ‚Ä¢ –†—ã–Ω–æ—á–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ - –∞–Ω–∞–ª–∏–∑ –≤–∞–∫–∞–Ω—Å–∏–π –∏ –∑–∞—Ä–ø–ª–∞—Ç")
        print("  ‚Ä¢ –ò–Ω—Å–∞–π—Ç—ã –¥–ª—è MVP - —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞")
        print()
        self.app.run_server(debug=debug, port=port, host='127.0.0.1')

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    dashboard = MaterialEducationDashboard()
    dashboard.run()

if __name__ == "__main__":
    main() 