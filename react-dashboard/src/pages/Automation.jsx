import {
  Box,
  Grid,
  Card,
  CardContent,
  Typography,
  Button,
  Switch,
  TextField,
  Alert,
  Chip,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Avatar,
  FormControlLabel,
  Divider,
  Paper,
  IconButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Snackbar,
  CircularProgress,
} from '@mui/material'
import {
  PlayArrow,
  Stop,
  Science,
  Telegram,
  LinkedIn,
  Schedule,
  Analytics,
  Edit,
  Add,
  Warning,
  Pause,
  GetApp,
  Settings,
  CheckCircle,
  Error,
} from '@mui/icons-material'
import { useState, useEffect } from 'react'
import { useAutomation, useNotification } from '../hooks/useFirebase.js'

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function StatCard({ title, value, icon, color = 'primary' }) {
  return (
    <Card>
      <CardContent sx={{ textAlign: 'center' }}>
        <Avatar sx={{ bgcolor: `${color}.main`, mx: 'auto', mb: 2 }}>
          {icon}
        </Avatar>
        <Typography variant="h4" component="div" gutterBottom>
          {value}
        </Typography>
        <Typography variant="body2" color="textSecondary">
          {title}
        </Typography>
      </CardContent>
    </Card>
  )
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞
function BotSettings({ config, onSave, onTest }) {
  const [localConfig, setLocalConfig] = useState(config)
  const [testing, setTesting] = useState(false)

  const handleSave = () => {
    onSave(localConfig)
  }

  const handleTest = async () => {
    setTesting(true)
    await onTest(localConfig)
    setTesting(false)
  }

  return (
    <Card>
      <CardContent>
        <Typography variant="h6" gutterBottom>
          ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –±–æ—Ç–∞
        </Typography>
        
        <TextField
          fullWidth
          label="Bot Token"
          value={localConfig.token || ''}
          onChange={(e) => setLocalConfig({...localConfig, token: e.target.value})}
          margin="normal"
          placeholder="–¢–æ–∫–µ–Ω –æ—Ç @BotFather"
          type="password"
        />
        
        <TextField
          fullWidth
          label="Chat ID"
          value={localConfig.chatId || ''}
          onChange={(e) => setLocalConfig({...localConfig, chatId: e.target.value})}
          margin="normal"
          placeholder="–í–∞—à Chat ID –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
        />
        
        <TextField
          fullWidth
          label="Channel ID"
          value={localConfig.channelId || ''}
          onChange={(e) => setLocalConfig({...localConfig, channelId: e.target.value})}
          margin="normal"
          placeholder="@your_channel (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
        />
        
        <Box sx={{ mt: 3 }}>
          <Button 
            variant="contained" 
            onClick={handleSave}
            sx={{ mr: 2 }}
            startIcon={<Settings />}
          >
            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
          </Button>
          <Button 
            variant="outlined" 
            onClick={handleTest}
            disabled={testing || !localConfig.token}
            startIcon={testing ? <CircularProgress size={16} /> : <CheckCircle />}
          >
            –ü—Ä–æ–≤–µ—Ä–∏—Ç—å
          </Button>
        </Box>
      </CardContent>
    </Card>
  )
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤
function PostSchedule({ schedule, onEdit, onAdd }) {
  const telegramPosts = schedule.filter(p => p.platform === 'telegram')
  const linkedinPosts = schedule.filter(p => p.platform === 'linkedin')

  const ScheduleCard = ({ title, posts, platform }) => (
    <Card>
      <CardContent>
        <Typography variant="h6" gutterBottom>
          {platform === 'telegram' ? <Telegram sx={{ mr: 1 }} /> : <LinkedIn sx={{ mr: 1 }} />}
          {title}
        </Typography>
        
        <List dense>
          {posts.map((post, index) => (
            <ListItem key={index} divider>
              <ListItemIcon>
                <Schedule />
              </ListItemIcon>
              <ListItemText
                primary={post.title}
                secondary={`${post.day} ${post.time}`}
              />
              <IconButton onClick={() => onEdit(post)}>
                <Edit />
              </IconButton>
            </ListItem>
          ))}
        </List>
        
        <Button 
          fullWidth 
          startIcon={<Add />} 
          onClick={() => onAdd(platform)}
          sx={{ mt: 2 }}
        >
          –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç
        </Button>
      </CardContent>
    </Card>
  )

  return (
    <Grid container spacing={3}>
      <Grid item xs={12} md={6}>
        <ScheduleCard 
          title="Telegram –ø–æ—Å—Ç—ã" 
          posts={telegramPosts} 
          platform="telegram" 
        />
      </Grid>
      <Grid item xs={12} md={6}>
        <ScheduleCard 
          title="LinkedIn –ø–æ—Å—Ç—ã" 
          posts={linkedinPosts} 
          platform="linkedin" 
        />
      </Grid>
    </Grid>
  )
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å—Ç–æ–≤
function PostPreview({ nextPosts, onEdit }) {
  return (
    <Grid container spacing={3}>
      {nextPosts.map((post, index) => (
        <Grid item xs={12} md={6} key={index}>
          <Card>
            <CardContent>
              <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                {post.platform === 'telegram' ? <Telegram /> : <LinkedIn />}
                <Typography variant="h6" sx={{ ml: 1 }}>
                  –°–ª–µ–¥—É—é—â–∏–π {post.platform} –ø–æ—Å—Ç
                </Typography>
              </Box>
              
              <Paper sx={{ p: 2, bgcolor: 'grey.50', mb: 2 }}>
                <Typography variant="body2" style={{ whiteSpace: 'pre-line' }}>
                  {post.content}
                </Typography>
              </Paper>
              
              <Button 
                variant="outlined" 
                startIcon={<Edit />}
                onClick={() => onEdit(post)}
              >
                –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
              </Button>
            </CardContent>
          </Card>
        </Grid>
      ))}
    </Grid>
  )
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
function EmergencyActions({ onEmergencyPost, onPauseAll, onResumeAll, isPaused }) {
  const [emergencyText, setEmergencyText] = useState('')

  return (
    <Card>
      <CardContent>
        <Typography variant="h6" gutterBottom>
          üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        </Typography>
        
        <TextField
          fullWidth
          multiline
          rows={4}
          label="–¢–µ–∫—Å—Ç —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"
          value={emergencyText}
          onChange={(e) => setEmergencyText(e.target.value)}
          margin="normal"
        />
        
        <Box sx={{ mt: 2, mb: 3 }}>
          <Button 
            variant="contained" 
            color="warning"
            startIcon={<Telegram />}
            onClick={() => onEmergencyPost('telegram', emergencyText)}
            disabled={!emergencyText.trim()}
            sx={{ mr: 2, mb: 1 }}
          >
            Telegram
          </Button>
          <Button 
            variant="contained" 
            color="warning"
            startIcon={<LinkedIn />}
            onClick={() => onEmergencyPost('linkedin', emergencyText)}
            disabled={!emergencyText.trim()}
            sx={{ mb: 1 }}
          >
            LinkedIn
          </Button>
        </Box>
        
        <Divider sx={{ my: 2 }} />
        
        <Box>
          <Button 
            variant={isPaused ? "outlined" : "contained"}
            color="error"
            startIcon={<Pause />}
            onClick={onPauseAll}
            disabled={isPaused}
            sx={{ mr: 2 }}
          >
            –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ
          </Button>
          <Button 
            variant={isPaused ? "contained" : "outlined"}
            color="success"
            startIcon={<PlayArrow />}
            onClick={onResumeAll}
            disabled={!isPaused}
          >
            –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ
          </Button>
        </Box>
      </CardContent>
    </Card>
  )
}

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
function Automation() {
  const { stats, loading, error, refresh } = useAutomation()
  const { notification, showSuccess, showError, hideNotification } = useNotification()
  
  const [automationRunning, setAutomationRunning] = useState(false)
  const [botConfig, setBotConfig] = useState({
    token: '',
    chatId: '',
    channelId: ''
  })
  const [isPaused, setIsPaused] = useState(false)
  
  // –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –±—É–¥—É—Ç –∏–∑ Firebase)
  const [schedule] = useState([
    { platform: 'telegram', day: '–í—Ç–æ—Ä–Ω–∏–∫', time: '9:00', title: '–û–ø—Ä–æ—Å –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤' },
    { platform: 'telegram', day: '–°—Ä–µ–¥–∞', time: '11:00', title: '–õ–∞–π—Ñ—Ö–∞–∫: —Ç–µ—Ö–Ω–∏–∫–∞ ‚Üí –±–∏–∑–Ω–µ—Å' },
    { platform: 'telegram', day: '–ü—è—Ç–Ω–∏—Ü–∞', time: '15:00', title: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫—É—Ä—Å–∞' },
    { platform: 'linkedin', day: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', time: '10:00', title: '–†–µ–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è' },
    { platform: 'linkedin', day: '–ß–µ—Ç–≤–µ—Ä–≥', time: '14:00', title: '–°–µ–∫—Ä–µ—Ç –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞' },
  ])
  
  const [nextPosts] = useState([
    {
      platform: 'telegram',
      content: `üéØ –û–ø—Ä–æ—Å –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤:

–ö–∞–∫ —á–∞—Å—Ç–æ –≤–∞–º –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è –æ–±—ä—è—Å–Ω—è—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ –Ω–µ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –ª—é–¥—è–º?

üîπ –ö–∞–∂–¥—ã–π –¥–µ–Ω—å
üîπ –ù–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é  
üîπ –†–∞–∑ –≤ –º–µ—Å—è—Ü
üîπ –ü–æ—á—Ç–∏ –Ω–∏–∫–æ–≥–¥–∞

–ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –ø–µ—Ä–≤—ã–µ –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ - –≤–∞–º —Ç–æ—á–Ω–æ –Ω—É–∂–µ–Ω –∫—É—Ä—Å "–ö–∞–∫ –æ–±—ä—è—Å–Ω—è—Ç—å –∫–æ–¥ –±–∏–∑–Ω–µ—Å—É"`
    },
    {
      platform: 'linkedin',
      content: `üöÄ –†–µ–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –∏–∑ –º–æ–µ–π –ø—Ä–∞–∫—Ç–∏–∫–∏:

–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: "–ù—É–∂–Ω–æ –æ—Ç—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ç—å legacy –∫–æ–¥"
–ú–µ–Ω–µ–¥–∂–µ—Ä: "–ó–∞—á–µ–º —Ç—Ä–∞—Ç–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ —Ç–æ, —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?"

–ó–Ω–∞–∫–æ–º–æ? 

–ü—Ä–æ–±–ª–µ–º–∞ –Ω–µ –≤ –∫–æ–¥–µ, –∞ –≤ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏...`
    }
  ])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  const handleStartAutomation = () => {
    if (!botConfig.token || !botConfig.chatId) {
      showError('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º')
      return
    }
    setAutomationRunning(true)
    showSuccess('–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞!')
  }

  const handleStopAutomation = () => {
    setAutomationRunning(false)
    showSuccess('–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')
  }

  const handleTestPost = () => {
    showSuccess('–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!')
  }

  const handleSaveBotConfig = (config) => {
    setBotConfig(config)
    showSuccess('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')
  }

  const handleTestBot = async (config) => {
    // –ò–º–∏—Ç–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await new Promise(resolve => setTimeout(resolve, 2000))
    showSuccess('–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!')
  }

  const handleEmergencyPost = (platform, text) => {
    showSuccess(`–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ ${platform}`)
  }

  const handlePauseAll = () => {
    setIsPaused(true)
    showSuccess('–í—Å–µ –ø–æ—Å—Ç—ã –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã')
  }

  const handleResumeAll = () => {
    setIsPaused(false)
    showSuccess('–ü–æ—Å—Ç—ã –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω—ã')
  }

  if (error) {
    return (
      <Box>
        <Alert severity="error" sx={{ mb: 2 }}>
          –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {error}
        </Alert>
        <Button onClick={refresh} variant="contained">
          –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        </Button>
      </Box>
    )
  }

  return (
    <Box>
      {/* Header */}
      <Box sx={{ mb: 4 }}>
        <Typography variant="h4" component="h1" gutterBottom sx={{ fontWeight: 700 }}>
          ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è
        </Typography>
        <Typography variant="subtitle1" color="textSecondary">
          –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–æ–º –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã
        </Typography>
      </Box>

      {/* –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã */}
      <Card sx={{ mb: 4 }}>
        <CardContent>
          <Typography variant="h6" gutterBottom>
            üìä –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
          </Typography>
          
          <Grid container spacing={3} sx={{ mb: 3 }}>
            <Grid item xs={6} sm={3}>
              <StatCard 
                title="–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"
                value={automationRunning ? "üü¢" : "‚èπÔ∏è"}
                icon={automationRunning ? <PlayArrow /> : <Stop />}
                color={automationRunning ? "success" : "grey"}
              />
            </Grid>
            <Grid item xs={6} sm={3}>
              <StatCard 
                title="–ü–æ—Å—Ç–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é"
                value={loading ? "..." : stats?.thisWeek || 0}
                icon={<Schedule />}
                color="primary"
              />
            </Grid>
            <Grid item xs={6} sm={3}>
              <StatCard 
                title="–í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤"
                value={loading ? "..." : stats?.totalPosts || 0}
                icon={<Analytics />}
                color="info"
              />
            </Grid>
            <Grid item xs={6} sm={3}>
              <StatCard 
                title="–ü–ª–∞—Ç—Ñ–æ—Ä–º—ã"
                value={loading ? "..." : Object.keys(stats?.platforms || {}).length}
                icon={<LinkedIn />}
                color="warning"
              />
            </Grid>
          </Grid>

          <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap' }}>
            <Button 
              variant="contained" 
              color="success"
              startIcon={<PlayArrow />}
              onClick={handleStartAutomation}
              disabled={automationRunning}
            >
              –ó–∞–ø—É—Å—Ç–∏—Ç—å
            </Button>
            <Button 
              variant="contained" 
              color="error"
              startIcon={<Stop />}
              onClick={handleStopAutomation}
              disabled={!automationRunning}
            >
              –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
            </Button>
            <Button 
              variant="outlined"
              startIcon={<Science />}
              onClick={handleTestPost}
            >
              –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç
            </Button>
          </Box>
        </CardContent>
      </Card>

      {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ */}
      <Box sx={{ mb: 4 }}>
        <BotSettings 
          config={botConfig}
          onSave={handleSaveBotConfig}
          onTest={handleTestBot}
        />
      </Box>

      {/* –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ */}
      <Box sx={{ mb: 4 }}>
        <Typography variant="h6" gutterBottom>
          üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤
        </Typography>
        <PostSchedule 
          schedule={schedule}
          onEdit={(post) => showSuccess(`–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${post.title}`)}
          onAdd={(platform) => showSuccess(`–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –¥–ª—è ${platform}`)}
        />
      </Box>

      {/* –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–æ–≤ */}
      <Box sx={{ mb: 4 }}>
        <Typography variant="h6" gutterBottom>
          üëÄ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        </Typography>
        <PostPreview 
          nextPosts={nextPosts}
          onEdit={(post) => showSuccess(`–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${post.platform} –ø–æ—Å—Ç–∞`)}
        />
      </Box>

      {/* –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
      <Box sx={{ mb: 4 }}>
        <EmergencyActions 
          onEmergencyPost={handleEmergencyPost}
          onPauseAll={handlePauseAll}
          onResumeAll={handleResumeAll}
          isPaused={isPaused}
        />
      </Box>

      {/* –°–Ω—ç–∫–±–∞—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
      <Snackbar
        open={!!notification}
        autoHideDuration={4000}
        onClose={hideNotification}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}
      >
        {notification && (
          <Alert 
            onClose={hideNotification} 
            severity={notification.type}
            variant="filled"
          >
            {notification.message}
          </Alert>
        )}
      </Snackbar>
    </Box>
  )
}

export default Automation 